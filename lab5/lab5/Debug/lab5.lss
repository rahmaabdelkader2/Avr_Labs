
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000548  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000548  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001182  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a35  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aef  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000924  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000107f  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000048ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  7a:	0c 94 a2 02 	jmp	0x544	; 0x544 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MDIO_enuSetPinValue>:
            default: return MDIO_NOK;
        }
        return MDIO_OK;
    }
    return MDIO_NOK;
}
  82:	44 23       	and	r20, r20
  84:	d9 f1       	breq	.+118    	; 0xfc <MDIO_enuSetPinValue+0x7a>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <MDIO_enuSetPinValue+0xa>
  8a:	74 c0       	rjmp	.+232    	; 0x174 <MDIO_enuSetPinValue+0xf2>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <MDIO_enuSetPinValue+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <MDIO_enuSetPinValue+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <MDIO_enuSetPinValue+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <MDIO_enuSetPinValue+0x62>
  9a:	6e c0       	rjmp	.+220    	; 0x178 <MDIO_enuSetPinValue+0xf6>
  9c:	2b b3       	in	r18, 0x1b	; 27
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <MDIO_enuSetPinValue+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <MDIO_enuSetPinValue+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	08 95       	ret
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <MDIO_enuSetPinValue+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <MDIO_enuSetPinValue+0x3a>
  c4:	82 2b       	or	r24, r18
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
  cc:	25 b3       	in	r18, 0x15	; 21
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <MDIO_enuSetPinValue+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <MDIO_enuSetPinValue+0x52>
  dc:	82 2b       	or	r24, r18
  de:	85 bb       	out	0x15, r24	; 21
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret
  e4:	22 b3       	in	r18, 0x12	; 18
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <MDIO_enuSetPinValue+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <MDIO_enuSetPinValue+0x6a>
  f4:	82 2b       	or	r24, r18
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	99 f0       	breq	.+38     	; 0x126 <MDIO_enuSetPinValue+0xa4>
 100:	28 f0       	brcs	.+10     	; 0x10c <MDIO_enuSetPinValue+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	e9 f0       	breq	.+58     	; 0x140 <MDIO_enuSetPinValue+0xbe>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	41 f1       	breq	.+80     	; 0x15a <MDIO_enuSetPinValue+0xd8>
 10a:	38 c0       	rjmp	.+112    	; 0x17c <MDIO_enuSetPinValue+0xfa>
 10c:	2b b3       	in	r18, 0x1b	; 27
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <MDIO_enuSetPinValue+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <MDIO_enuSetPinValue+0x92>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	8b bb       	out	0x1b, r24	; 27
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
 126:	28 b3       	in	r18, 0x18	; 24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <MDIO_enuSetPinValue+0xb0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <MDIO_enuSetPinValue+0xac>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
 140:	25 b3       	in	r18, 0x15	; 21
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <MDIO_enuSetPinValue+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <MDIO_enuSetPinValue+0xc6>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	85 bb       	out	0x15, r24	; 21
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
 15a:	22 b3       	in	r18, 0x12	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <MDIO_enuSetPinValue+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <MDIO_enuSetPinValue+0xe0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	82 bb       	out	0x12, r24	; 18
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret

00000180 <MDIO_enuGetPinValue>:

// Function to get the value of a pin
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, u8* Add_pu8PinValue)
{
   
        switch (Copy_enuPortNum)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 f0       	breq	.+36     	; 0x1a8 <MDIO_enuGetPinValue+0x28>
 184:	28 f0       	brcs	.+10     	; 0x190 <MDIO_enuGetPinValue+0x10>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	d9 f0       	breq	.+54     	; 0x1c0 <MDIO_enuGetPinValue+0x40>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	29 f1       	breq	.+74     	; 0x1d8 <MDIO_enuGetPinValue+0x58>
 18e:	30 c0       	rjmp	.+96     	; 0x1f0 <MDIO_enuGetPinValue+0x70>
        {
            case MDIO_PORTA: *Add_pu8PinValue = GET_BIT(PINA_REG, Copy_enuPinNum); break;
 190:	89 b3       	in	r24, 0x19	; 25
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <MDIO_enuGetPinValue+0x1a>
 196:	95 95       	asr	r25
 198:	87 95       	ror	r24
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <MDIO_enuGetPinValue+0x16>
 19e:	81 70       	andi	r24, 0x01	; 1
 1a0:	fa 01       	movw	r30, r20
 1a2:	80 83       	st	Z, r24
            case MDIO_PORTB: *Add_pu8PinValue = GET_BIT(PINB_REG, Copy_enuPinNum); break;
            case MDIO_PORTC: *Add_pu8PinValue = GET_BIT(PINC_REG, Copy_enuPinNum); break;
            case MDIO_PORTD: *Add_pu8PinValue = GET_BIT(PIND_REG, Copy_enuPinNum); break;
            default: return MDIO_NOK;
        }
        return MDIO_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, u8* Add_pu8PinValue)
{
   
        switch (Copy_enuPortNum)
        {
            case MDIO_PORTA: *Add_pu8PinValue = GET_BIT(PINA_REG, Copy_enuPinNum); break;
 1a6:	08 95       	ret
            case MDIO_PORTB: *Add_pu8PinValue = GET_BIT(PINB_REG, Copy_enuPinNum); break;
 1a8:	86 b3       	in	r24, 0x16	; 22
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <MDIO_enuGetPinValue+0x32>
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <MDIO_enuGetPinValue+0x2e>
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	fa 01       	movw	r30, r20
 1ba:	80 83       	st	Z, r24
            case MDIO_PORTC: *Add_pu8PinValue = GET_BIT(PINC_REG, Copy_enuPinNum); break;
            case MDIO_PORTD: *Add_pu8PinValue = GET_BIT(PIND_REG, Copy_enuPinNum); break;
            default: return MDIO_NOK;
        }
        return MDIO_OK;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
{
   
        switch (Copy_enuPortNum)
        {
            case MDIO_PORTA: *Add_pu8PinValue = GET_BIT(PINA_REG, Copy_enuPinNum); break;
            case MDIO_PORTB: *Add_pu8PinValue = GET_BIT(PINB_REG, Copy_enuPinNum); break;
 1be:	08 95       	ret
            case MDIO_PORTC: *Add_pu8PinValue = GET_BIT(PINC_REG, Copy_enuPinNum); break;
 1c0:	83 b3       	in	r24, 0x13	; 19
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <MDIO_enuGetPinValue+0x4a>
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <MDIO_enuGetPinValue+0x46>
 1ce:	81 70       	andi	r24, 0x01	; 1
 1d0:	fa 01       	movw	r30, r20
 1d2:	80 83       	st	Z, r24
            case MDIO_PORTD: *Add_pu8PinValue = GET_BIT(PIND_REG, Copy_enuPinNum); break;
            default: return MDIO_NOK;
        }
        return MDIO_OK;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
   
        switch (Copy_enuPortNum)
        {
            case MDIO_PORTA: *Add_pu8PinValue = GET_BIT(PINA_REG, Copy_enuPinNum); break;
            case MDIO_PORTB: *Add_pu8PinValue = GET_BIT(PINB_REG, Copy_enuPinNum); break;
            case MDIO_PORTC: *Add_pu8PinValue = GET_BIT(PINC_REG, Copy_enuPinNum); break;
 1d6:	08 95       	ret
            case MDIO_PORTD: *Add_pu8PinValue = GET_BIT(PIND_REG, Copy_enuPinNum); break;
 1d8:	80 b3       	in	r24, 0x10	; 16
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <MDIO_enuGetPinValue+0x62>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <MDIO_enuGetPinValue+0x5e>
 1e6:	81 70       	andi	r24, 0x01	; 1
 1e8:	fa 01       	movw	r30, r20
 1ea:	80 83       	st	Z, r24
            default: return MDIO_NOK;
        }
        return MDIO_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_enuPortNum)
        {
            case MDIO_PORTA: *Add_pu8PinValue = GET_BIT(PINA_REG, Copy_enuPinNum); break;
            case MDIO_PORTB: *Add_pu8PinValue = GET_BIT(PINB_REG, Copy_enuPinNum); break;
            case MDIO_PORTC: *Add_pu8PinValue = GET_BIT(PINC_REG, Copy_enuPinNum); break;
            case MDIO_PORTD: *Add_pu8PinValue = GET_BIT(PIND_REG, Copy_enuPinNum); break;
 1ee:	08 95       	ret
            default: return MDIO_NOK;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
        }
        return MDIO_OK;
    
}
 1f2:	08 95       	ret

000001f4 <HLID_vidINIT>:

extern LedCfg_t ledCfg [NUM_OF_LEDS];


void HLID_vidINIT()
{
 1f4:	cf 93       	push	r28
    u8 Local_u8LedIndex;
    for(Local_u8LedIndex = 0; Local_u8LedIndex < NUM_OF_LEDS; Local_u8LedIndex++)
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <HLID_vidINIT+0x1c>
    {
        MPORT_enuSetPinDirection(ledCfg[Local_u8LedIndex].Port_Pin, MPORT_OUTPUT);
 1fa:	ec 2f       	mov	r30, r28
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 81       	ld	r24, Z
 20a:	0e 94 76 01 	call	0x2ec	; 0x2ec <MPORT_enuSetPinDirection>


void HLID_vidINIT()
{
    u8 Local_u8LedIndex;
    for(Local_u8LedIndex = 0; Local_u8LedIndex < NUM_OF_LEDS; Local_u8LedIndex++)
 20e:	cf 5f       	subi	r28, 0xFF	; 255
 210:	c3 30       	cpi	r28, 0x03	; 3
 212:	98 f3       	brcs	.-26     	; 0x1fa <HLID_vidINIT+0x6>
    {
        MPORT_enuSetPinDirection(ledCfg[Local_u8LedIndex].Port_Pin, MPORT_OUTPUT);
    }
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LED_setValue>:


LedRetStatus_t LED_setValue(u8 LedName, u8 Value)
{
    for(u8 Local_u8LedIndex = 0; Local_u8LedIndex < NUM_OF_LEDS; Local_u8LedIndex++)
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	1a c0       	rjmp	.+52     	; 0x250 <LED_setValue+0x38>
    {
        if(ledCfg[Local_u8LedIndex].ledName == LedName)
 21c:	29 2f       	mov	r18, r25
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e0 5a       	subi	r30, 0xA0	; 160
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	51 81       	ldd	r21, Z+1	; 0x01
 22c:	58 13       	cpse	r21, r24
 22e:	0f c0       	rjmp	.+30     	; 0x24e <LED_setValue+0x36>
 230:	46 2f       	mov	r20, r22
        {
            u8 Local_u8PortNum = (ledCfg[Local_u8LedIndex].Port_Pin >> 4) & 0x0F;
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	f9 01       	movw	r30, r18
 238:	e0 5a       	subi	r30, 0xA0	; 160
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	80 81       	ld	r24, Z
            u8 Local_u8PinNum = ledCfg[Local_u8LedIndex].Port_Pin & 0x0F; 
 23e:	68 2f       	mov	r22, r24
 240:	6f 70       	andi	r22, 0x0F	; 15
            MDIO_enuSetPinValue(Local_u8PortNum,Local_u8PinNum, Value);
 242:	82 95       	swap	r24
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_enuSetPinValue>
            return OK;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
}


LedRetStatus_t LED_setValue(u8 LedName, u8 Value)
{
    for(u8 Local_u8LedIndex = 0; Local_u8LedIndex < NUM_OF_LEDS; Local_u8LedIndex++)
 24e:	9f 5f       	subi	r25, 0xFF	; 255
 250:	93 30       	cpi	r25, 0x03	; 3
 252:	20 f3       	brcs	.-56     	; 0x21c <LED_setValue+0x4>
            u8 Local_u8PinNum = ledCfg[Local_u8LedIndex].Port_Pin & 0x0F; 
            MDIO_enuSetPinValue(Local_u8PortNum,Local_u8PinNum, Value);
            return OK;
        }
    }
 254:	08 95       	ret

00000256 <main>:
#include "PORT_Config.h"
#include "bit_math.h"


int main()
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	1f 92       	push	r1
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
    HLID_vidINIT();
 260:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <HLID_vidINIT>
    SWITCH_init();
 264:	0e 94 5f 02 	call	0x4be	; 0x4be <SWITCH_init>
    u8 Local_u8SwitchState;
    LED_setValue(LED_START, 0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
    LED_setValue(LED_STOP, 0);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
    LED_setValue(LED_ALERT, 0);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>

    while(1)
    {
        SWITCH_enuGetSwitchState(HSWITCH_1, &Local_u8SwitchState);
 280:	be 01       	movw	r22, r28
 282:	6f 5f       	subi	r22, 0xFF	; 255
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SWITCH_enuGetSwitchState>
        Local_u8SwitchState ==1 ? LED_setValue(LED_START, 1) : LED_setValue(LED_START, 0);
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	29 f4       	brne	.+10     	; 0x29c <main+0x46>
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <main+0x4e>
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
        SWITCH_enuGetSwitchState(HSWITCH_2, &Local_u8SwitchState);
 2a4:	be 01       	movw	r22, r28
 2a6:	6f 5f       	subi	r22, 0xFF	; 255
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SWITCH_enuGetSwitchState>
        Local_u8SwitchState ==1 ? LED_setValue(LED_STOP, 1) : LED_setValue(LED_STOP, 0);
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	21 f4       	brne	.+8      	; 0x2be <main+0x68>
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <main+0x70>
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
        SWITCH_enuGetSwitchState(HSWITCH_3, &Local_u8SwitchState);
 2c6:	be 01       	movw	r22, r28
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SWITCH_enuGetSwitchState>
        Local_u8SwitchState ==1 ? LED_setValue(LED_ALERT, 1) : LED_setValue(LED_ALERT, 0);
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	29 f4       	brne	.+10     	; 0x2e2 <main+0x8c>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
 2e0:	cf cf       	rjmp	.-98     	; 0x280 <main+0x2a>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 0c 01 	call	0x218	; 0x218 <LED_setValue>
 2ea:	ca cf       	rjmp	.-108    	; 0x280 <main+0x2a>

000002ec <MPORT_enuSetPinDirection>:
}

MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( u8 Copy_enuPinNum  ,  u8  Copy_enuPinDirection  )
{

	u8 port_Number = (Copy_enuPinNum >> 4) & 0x0F; // Extract port number
 2ec:	98 2f       	mov	r25, r24
 2ee:	92 95       	swap	r25
 2f0:	9f 70       	andi	r25, 0x0F	; 15
	u8 pin_Number = Copy_enuPinNum & 0x0F;        // Extract pin number
 2f2:	8f 70       	andi	r24, 0x0F	; 15

	// Validate direction
	if (Copy_enuPinDirection < MPORT_INPUT || Copy_enuPinDirection > MPORT_INPUT_PULLUP)
 2f4:	63 30       	cpi	r22, 0x03	; 3
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <MPORT_enuSetPinDirection+0xe>
 2f8:	d6 c0       	rjmp	.+428    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
	{
		return MPORT_ERROR_INVALID_DIRECTION;
	}

	switch (port_Number)
 2fa:	91 30       	cpi	r25, 0x01	; 1
 2fc:	d9 f1       	breq	.+118    	; 0x374 <MPORT_enuSetPinDirection+0x88>
 2fe:	38 f0       	brcs	.+14     	; 0x30e <MPORT_enuSetPinDirection+0x22>
 300:	92 30       	cpi	r25, 0x02	; 2
 302:	09 f4       	brne	.+2      	; 0x306 <MPORT_enuSetPinDirection+0x1a>
 304:	6a c0       	rjmp	.+212    	; 0x3da <MPORT_enuSetPinDirection+0xee>
 306:	93 30       	cpi	r25, 0x03	; 3
 308:	09 f4       	brne	.+2      	; 0x30c <MPORT_enuSetPinDirection+0x20>
 30a:	9a c0       	rjmp	.+308    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 30c:	ce c0       	rjmp	.+412    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		case 0: // PORTA
		switch (Copy_enuPinDirection)
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	91 f0       	breq	.+36     	; 0x336 <MPORT_enuSetPinDirection+0x4a>
 312:	18 f0       	brcs	.+6      	; 0x31a <MPORT_enuSetPinDirection+0x2e>
 314:	62 30       	cpi	r22, 0x02	; 2
 316:	e1 f0       	breq	.+56     	; 0x350 <MPORT_enuSetPinDirection+0x64>
 318:	ca c0       	rjmp	.+404    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			case MPORT_INPUT:
			CLR_BIT(DDRA_REG, pin_Number); // Configure as input
 31a:	4a b3       	in	r20, 0x1a	; 26
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <MPORT_enuSetPinDirection+0x3c>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <MPORT_enuSetPinDirection+0x38>
 32c:	cb 01       	movw	r24, r22
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8a bb       	out	0x1a, r24	; 26
			break;
 334:	b7 c0       	rjmp	.+366    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_OUTPUT:
			SET_BIT(DDRA_REG, pin_Number); // Configure as output
 336:	4a b3       	in	r20, 0x1a	; 26
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <MPORT_enuSetPinDirection+0x58>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <MPORT_enuSetPinDirection+0x54>
 348:	cb 01       	movw	r24, r22
 34a:	84 2b       	or	r24, r20
 34c:	8a bb       	out	0x1a, r24	; 26
			break;
 34e:	aa c0       	rjmp	.+340    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_INPUT_PULLUP:
			CLR_BIT(DDRA_REG, pin_Number); // Configure as input
 350:	4a b3       	in	r20, 0x1a	; 26
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <MPORT_enuSetPinDirection+0x72>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <MPORT_enuSetPinDirection+0x6e>
 362:	cb 01       	movw	r24, r22
 364:	96 2f       	mov	r25, r22
 366:	90 95       	com	r25
 368:	94 23       	and	r25, r20
 36a:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA_REG, pin_Number);  // Enable pull-up
 36c:	9b b3       	in	r25, 0x1b	; 27
 36e:	89 2b       	or	r24, r25
 370:	8b bb       	out	0x1b, r24	; 27
			break;
 372:	98 c0       	rjmp	.+304    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			return MPORT_ERROR_INVALID_DIRECTION;
		}
		break;

		case 1: // PORTB
		switch (Copy_enuPinDirection)
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	91 f0       	breq	.+36     	; 0x39c <MPORT_enuSetPinDirection+0xb0>
 378:	18 f0       	brcs	.+6      	; 0x380 <MPORT_enuSetPinDirection+0x94>
 37a:	62 30       	cpi	r22, 0x02	; 2
 37c:	e1 f0       	breq	.+56     	; 0x3b6 <MPORT_enuSetPinDirection+0xca>
 37e:	99 c0       	rjmp	.+306    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		{
			case MPORT_INPUT:
			CLR_BIT(DDRB_REG, pin_Number);
 380:	47 b3       	in	r20, 0x17	; 23
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	b9 01       	movw	r22, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <MPORT_enuSetPinDirection+0xa2>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	8a 95       	dec	r24
 390:	e2 f7       	brpl	.-8      	; 0x38a <MPORT_enuSetPinDirection+0x9e>
 392:	cb 01       	movw	r24, r22
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	87 bb       	out	0x17, r24	; 23
			break;
 39a:	84 c0       	rjmp	.+264    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_OUTPUT:
			SET_BIT(DDRB_REG, pin_Number);
 39c:	47 b3       	in	r20, 0x17	; 23
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <MPORT_enuSetPinDirection+0xbe>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <MPORT_enuSetPinDirection+0xba>
 3ae:	cb 01       	movw	r24, r22
 3b0:	84 2b       	or	r24, r20
 3b2:	87 bb       	out	0x17, r24	; 23
			break;
 3b4:	77 c0       	rjmp	.+238    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_INPUT_PULLUP:
			CLR_BIT(DDRB_REG, pin_Number);
 3b6:	47 b3       	in	r20, 0x17	; 23
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MPORT_enuSetPinDirection+0xd8>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <MPORT_enuSetPinDirection+0xd4>
 3c8:	cb 01       	movw	r24, r22
 3ca:	96 2f       	mov	r25, r22
 3cc:	90 95       	com	r25
 3ce:	94 23       	and	r25, r20
 3d0:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB_REG, pin_Number);
 3d2:	98 b3       	in	r25, 0x18	; 24
 3d4:	89 2b       	or	r24, r25
 3d6:	88 bb       	out	0x18, r24	; 24
			break;
 3d8:	65 c0       	rjmp	.+202    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			default:
			return MPORT_ERROR_INVALID_DIRECTION;
		}
		break;
		case 2: // PORTC
		switch (Copy_enuPinDirection)
 3da:	61 30       	cpi	r22, 0x01	; 1
 3dc:	91 f0       	breq	.+36     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <MPORT_enuSetPinDirection+0xfa>
 3e0:	62 30       	cpi	r22, 0x02	; 2
 3e2:	e1 f0       	breq	.+56     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3e4:	68 c0       	rjmp	.+208    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			case MPORT_INPUT:
			CLR_BIT(DDRC_REG, pin_Number);
 3e6:	44 b3       	in	r20, 0x14	; 20
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <MPORT_enuSetPinDirection+0x108>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <MPORT_enuSetPinDirection+0x104>
 3f8:	cb 01       	movw	r24, r22
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	84 bb       	out	0x14, r24	; 20
			break;
 400:	51 c0       	rjmp	.+162    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_OUTPUT:
			SET_BIT(DDRC_REG, pin_Number);
 402:	44 b3       	in	r20, 0x14	; 20
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	84 2b       	or	r24, r20
 418:	84 bb       	out	0x14, r24	; 20
			break;
 41a:	44 c0       	rjmp	.+136    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_INPUT_PULLUP:
			CLR_BIT(DDRC_REG, pin_Number);
 41c:	44 b3       	in	r20, 0x14	; 20
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	96 2f       	mov	r25, r22
 432:	90 95       	com	r25
 434:	94 23       	and	r25, r20
 436:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC_REG, pin_Number);
 438:	95 b3       	in	r25, 0x15	; 21
 43a:	89 2b       	or	r24, r25
 43c:	85 bb       	out	0x15, r24	; 21
			break;
 43e:	32 c0       	rjmp	.+100    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			default:
			return MPORT_ERROR_INVALID_DIRECTION;
		}
		break;
		case 3: // PORTD
		switch (Copy_enuPinDirection)
 440:	61 30       	cpi	r22, 0x01	; 1
 442:	91 f0       	breq	.+36     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 444:	18 f0       	brcs	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	62 30       	cpi	r22, 0x02	; 2
 448:	e1 f0       	breq	.+56     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 44a:	37 c0       	rjmp	.+110    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		{
			case MPORT_INPUT:
			CLR_BIT(DDRD_REG, pin_Number);
 44c:	41 b3       	in	r20, 0x11	; 17
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	80 95       	com	r24
 462:	84 23       	and	r24, r20
 464:	81 bb       	out	0x11, r24	; 17
			break;
 466:	1e c0       	rjmp	.+60     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_OUTPUT:
			SET_BIT(DDRD_REG, pin_Number);
 468:	41 b3       	in	r20, 0x11	; 17
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	81 bb       	out	0x11, r24	; 17
			break;
 480:	11 c0       	rjmp	.+34     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

			case MPORT_INPUT_PULLUP:
			CLR_BIT(DDRD_REG, pin_Number);
 482:	41 b3       	in	r20, 0x11	; 17
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	cb 01       	movw	r24, r22
 496:	96 2f       	mov	r25, r22
 498:	90 95       	com	r25
 49a:	94 23       	and	r25, r20
 49c:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD_REG, pin_Number);
 49e:	92 b3       	in	r25, 0x12	; 18
 4a0:	89 2b       	or	r24, r25
 4a2:	82 bb       	out	0x12, r24	; 18
		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	
}
 4a4:	08 95       	ret
	u8 pin_Number = Copy_enuPinNum & 0x0F;        // Extract pin number

	// Validate direction
	if (Copy_enuPinDirection < MPORT_INPUT || Copy_enuPinDirection > MPORT_INPUT_PULLUP)
	{
		return MPORT_ERROR_INVALID_DIRECTION;
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	08 95       	ret
			return MPORT_ERROR_INVALID_DIRECTION;
		}
		break;
		
		default:
		return MPORT_ERROR_INVALID_PIN;
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	08 95       	ret
			CLR_BIT(DDRA_REG, pin_Number); // Configure as input
			SET_BIT(PORTA_REG, pin_Number);  // Enable pull-up
			break;

			default:
			return MPORT_ERROR_INVALID_DIRECTION;
 4ae:	87 e0       	ldi	r24, 0x07	; 7
 4b0:	08 95       	ret
			CLR_BIT(DDRB_REG, pin_Number);
			SET_BIT(PORTB_REG, pin_Number);
			break;

			default:
			return MPORT_ERROR_INVALID_DIRECTION;
 4b2:	87 e0       	ldi	r24, 0x07	; 7
 4b4:	08 95       	ret
			CLR_BIT(DDRC_REG, pin_Number);
			SET_BIT(PORTC_REG, pin_Number);
			break;

			default:
			return MPORT_ERROR_INVALID_DIRECTION;
 4b6:	87 e0       	ldi	r24, 0x07	; 7
 4b8:	08 95       	ret
			CLR_BIT(DDRD_REG, pin_Number);
			SET_BIT(PORTD_REG, pin_Number);
			break;

			default:
			return MPORT_ERROR_INVALID_DIRECTION;
 4ba:	87 e0       	ldi	r24, 0x07	; 7
		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	
}
 4bc:	08 95       	ret

000004be <SWITCH_init>:
extern SWITCH_t SWITCH_AstrSwitches[NUM_OF_SWITCHES];



void SWITCH_init()
{
 4be:	cf 93       	push	r28
    u8 Local_u8SwitchIndex;
    for(Local_u8SwitchIndex = 0; Local_u8SwitchIndex < NUM_OF_SWITCHES; Local_u8SwitchIndex++)
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <SWITCH_init+0x22>
    {
        MPORT_enuSetPinDirection(SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchPortPin, SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchConnectionType);
 4c4:	ec 2f       	mov	r30, r28
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	cf 01       	movw	r24, r30
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	e8 0f       	add	r30, r24
 4d0:	f9 1f       	adc	r31, r25
 4d2:	ea 59       	subi	r30, 0x9A	; 154
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	62 81       	ldd	r22, Z+2	; 0x02
 4d8:	81 81       	ldd	r24, Z+1	; 0x01
 4da:	0e 94 76 01 	call	0x2ec	; 0x2ec <MPORT_enuSetPinDirection>


void SWITCH_init()
{
    u8 Local_u8SwitchIndex;
    for(Local_u8SwitchIndex = 0; Local_u8SwitchIndex < NUM_OF_SWITCHES; Local_u8SwitchIndex++)
 4de:	cf 5f       	subi	r28, 0xFF	; 255
 4e0:	c3 30       	cpi	r28, 0x03	; 3
 4e2:	80 f3       	brcs	.-32     	; 0x4c4 <SWITCH_init+0x6>
    {
        MPORT_enuSetPinDirection(SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchPortPin, SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchConnectionType);
    }
}
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <SWITCH_enuGetSwitchState>:
{

    SWITCH_enuErrorStatus_t Local_enuErrorStatus = SW_NOK;
    u8 Local_u8SwitchIndex;

    for(Local_u8SwitchIndex = 0; Local_u8SwitchIndex < NUM_OF_SWITCHES; Local_u8SwitchIndex++)
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	24 c0       	rjmp	.+72     	; 0x534 <SWITCH_enuGetSwitchState+0x4c>
    {
        if(SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchName == Copy_u8SwitchName)
 4ec:	29 2f       	mov	r18, r25
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	e2 0f       	add	r30, r18
 4f8:	f3 1f       	adc	r31, r19
 4fa:	ea 59       	subi	r30, 0x9A	; 154
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	50 81       	ld	r21, Z
 500:	58 13       	cpse	r21, r24
 502:	17 c0       	rjmp	.+46     	; 0x532 <SWITCH_enuGetSwitchState+0x4a>
        {
            u8 Local_u8PortValue = (SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchPortPin >> 4) & 0x0F;
 504:	f9 01       	movw	r30, r18
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	2e 0f       	add	r18, r30
 50c:	3f 1f       	adc	r19, r31
 50e:	f9 01       	movw	r30, r18
 510:	ea 59       	subi	r30, 0x9A	; 154
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	91 81       	ldd	r25, Z+1	; 0x01
 516:	89 2f       	mov	r24, r25
 518:	82 95       	swap	r24
 51a:	8f 70       	andi	r24, 0x0F	; 15
            u8 Local_u8PinValue = SWITCH_AstrSwitches[Local_u8SwitchIndex].SwitchPortPin & 0x0F;
 51c:	9f 70       	andi	r25, 0x0F	; 15
            if(Local_u8PortValue <= MDIO_PORTD && Local_u8PinValue <= MDIO_PIN7)
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	68 f4       	brcc	.+26     	; 0x53c <SWITCH_enuGetSwitchState+0x54>
 522:	98 30       	cpi	r25, 0x08	; 8
 524:	68 f4       	brcc	.+26     	; 0x540 <SWITCH_enuGetSwitchState+0x58>
 526:	ab 01       	movw	r20, r22
            {
                MDIO_enuGetPinValue(Local_u8PortValue, Local_u8PinValue, Add_pu8State);
 528:	69 2f       	mov	r22, r25
 52a:	0e 94 c0 00 	call	0x180	; 0x180 <MDIO_enuGetPinValue>
                Local_enuErrorStatus = SW_OK;        
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	08 95       	ret
{

    SWITCH_enuErrorStatus_t Local_enuErrorStatus = SW_NOK;
    u8 Local_u8SwitchIndex;

    for(Local_u8SwitchIndex = 0; Local_u8SwitchIndex < NUM_OF_SWITCHES; Local_u8SwitchIndex++)
 532:	9f 5f       	subi	r25, 0xFF	; 255
 534:	93 30       	cpi	r25, 0x03	; 3
 536:	d0 f2       	brcs	.-76     	; 0x4ec <SWITCH_enuGetSwitchState+0x4>
}

SWITCH_enuErrorStatus_t SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName, u8* Add_pu8State)
{

    SWITCH_enuErrorStatus_t Local_enuErrorStatus = SW_NOK;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	08 95       	ret
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret
 540:	80 e0       	ldi	r24, 0x00	; 0
            }
            break;
        }
    }
    return Local_enuErrorStatus;
}
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
