
iti_task6_dio_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000424  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ec  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000677  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e5  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  64:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_enuSetPinConfigration>:
#include "dio.h"  
/*
 * function to set pin configuration
 */
MDIO_enuErrorStatus_t MDIO_enuSetPinConfigration(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8 Copy_enuConfigration) {
    if (Copy_enuPinNum > 7) {
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <MDIO_enuSetPinConfigration+0x6>
  70:	dd c0       	rjmp	.+442    	; 0x22c <MDIO_enuSetPinConfigration+0x1c0>
        return MDIO_INVALID_PIN;  // Invalid pin number
    }

    switch (Copy_enuPortNum) {
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	e9 f1       	breq	.+122    	; 0xf0 <MDIO_enuSetPinConfigration+0x84>
  76:	38 f0       	brcs	.+14     	; 0x86 <MDIO_enuSetPinConfigration+0x1a>
  78:	82 30       	cpi	r24, 0x02	; 2
  7a:	09 f4       	brne	.+2      	; 0x7e <MDIO_enuSetPinConfigration+0x12>
  7c:	6e c0       	rjmp	.+220    	; 0x15a <MDIO_enuSetPinConfigration+0xee>
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	09 f4       	brne	.+2      	; 0x84 <MDIO_enuSetPinConfigration+0x18>
  82:	a0 c0       	rjmp	.+320    	; 0x1c4 <MDIO_enuSetPinConfigration+0x158>
  84:	d5 c0       	rjmp	.+426    	; 0x230 <MDIO_enuSetPinConfigration+0x1c4>
        case 0: /* PORTA */
            if (Copy_enuConfigration == PIN_OUTPUT) {
  86:	43 30       	cpi	r20, 0x03	; 3
  88:	61 f4       	brne	.+24     	; 0xa2 <MDIO_enuSetPinConfigration+0x36>
                DDRA |= (1 << Copy_enuPinNum);
  8a:	2a b3       	in	r18, 0x1a	; 26
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <MDIO_enuSetPinConfigration+0x2a>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <MDIO_enuSetPinConfigration+0x26>
  9a:	82 2b       	or	r24, r18
  9c:	8a bb       	out	0x1a, r24	; 26

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret

    switch (Copy_enuPortNum) {
        case 0: /* PORTA */
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRA |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	89 f4       	brne	.+34     	; 0xc8 <MDIO_enuSetPinConfigration+0x5c>
                DDRA &= ~(1 << Copy_enuPinNum);
  a6:	2a b3       	in	r18, 0x1a	; 26
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <MDIO_enuSetPinConfigration+0x46>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <MDIO_enuSetPinConfigration+0x42>
  b6:	98 2f       	mov	r25, r24
  b8:	90 95       	com	r25
  ba:	92 23       	and	r25, r18
  bc:	9a bb       	out	0x1a, r25	; 26
                PORTA |= (1 << Copy_enuPinNum);
  be:	9b b3       	in	r25, 0x1b	; 27
  c0:	89 2b       	or	r24, r25
  c2:	8b bb       	out	0x1b, r24	; 27

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRA |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
                DDRA &= ~(1 << Copy_enuPinNum);
                PORTA |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
  c8:	42 30       	cpi	r20, 0x02	; 2
  ca:	09 f0       	breq	.+2      	; 0xce <MDIO_enuSetPinConfigration+0x62>
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <MDIO_enuSetPinConfigration+0x1c8>
                DDRA &= ~(1 << Copy_enuPinNum);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <MDIO_enuSetPinConfigration+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <MDIO_enuSetPinConfigration+0x6a>
  de:	80 95       	com	r24
  e0:	92 2f       	mov	r25, r18
  e2:	98 23       	and	r25, r24
  e4:	9a bb       	out	0x1a, r25	; 26
                PORTA &= ~(1 << Copy_enuPinNum);
  e6:	9b b3       	in	r25, 0x1b	; 27
  e8:	89 23       	and	r24, r25
  ea:	8b bb       	out	0x1b, r24	; 27

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
                return MDIO_NOK;
            }
            break;

        case 1: /* PORTB */
            if (Copy_enuConfigration == PIN_OUTPUT) {
  f0:	43 30       	cpi	r20, 0x03	; 3
  f2:	61 f4       	brne	.+24     	; 0x10c <MDIO_enuSetPinConfigration+0xa0>
                DDRB |= (1 << Copy_enuPinNum);
  f4:	27 b3       	in	r18, 0x17	; 23
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <MDIO_enuSetPinConfigration+0x94>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <MDIO_enuSetPinConfigration+0x90>
 104:	82 2b       	or	r24, r18
 106:	87 bb       	out	0x17, r24	; 23

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
            break;

        case 1: /* PORTB */
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRB |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
 10c:	41 30       	cpi	r20, 0x01	; 1
 10e:	89 f4       	brne	.+34     	; 0x132 <MDIO_enuSetPinConfigration+0xc6>
                DDRB &= ~(1 << Copy_enuPinNum);
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <MDIO_enuSetPinConfigration+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <MDIO_enuSetPinConfigration+0xac>
 120:	98 2f       	mov	r25, r24
 122:	90 95       	com	r25
 124:	92 23       	and	r25, r18
 126:	97 bb       	out	0x17, r25	; 23
                PORTB |= (1 << Copy_enuPinNum);
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	89 2b       	or	r24, r25
 12c:	88 bb       	out	0x18, r24	; 24

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRB |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
                DDRB &= ~(1 << Copy_enuPinNum);
                PORTB |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
 132:	42 30       	cpi	r20, 0x02	; 2
 134:	09 f0       	breq	.+2      	; 0x138 <MDIO_enuSetPinConfigration+0xcc>
 136:	80 c0       	rjmp	.+256    	; 0x238 <MDIO_enuSetPinConfigration+0x1cc>
                DDRB &= ~(1 << Copy_enuPinNum);
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <MDIO_enuSetPinConfigration+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <MDIO_enuSetPinConfigration+0xd4>
 148:	80 95       	com	r24
 14a:	92 2f       	mov	r25, r18
 14c:	98 23       	and	r25, r24
 14e:	97 bb       	out	0x17, r25	; 23
                PORTB &= ~(1 << Copy_enuPinNum);
 150:	98 b3       	in	r25, 0x18	; 24
 152:	89 23       	and	r24, r25
 154:	88 bb       	out	0x18, r24	; 24

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
                return MDIO_NOK;
            }
            break;

        case 2: /* PORTC */
            if (Copy_enuConfigration == PIN_OUTPUT) {
 15a:	43 30       	cpi	r20, 0x03	; 3
 15c:	61 f4       	brne	.+24     	; 0x176 <MDIO_enuSetPinConfigration+0x10a>
                DDRC |= (1 << Copy_enuPinNum);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <MDIO_enuSetPinConfigration+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <MDIO_enuSetPinConfigration+0xfa>
 16e:	82 2b       	or	r24, r18
 170:	84 bb       	out	0x14, r24	; 20

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
            break;

        case 2: /* PORTC */
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRC |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	89 f4       	brne	.+34     	; 0x19c <MDIO_enuSetPinConfigration+0x130>
                DDRC &= ~(1 << Copy_enuPinNum);
 17a:	24 b3       	in	r18, 0x14	; 20
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <MDIO_enuSetPinConfigration+0x11a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <MDIO_enuSetPinConfigration+0x116>
 18a:	98 2f       	mov	r25, r24
 18c:	90 95       	com	r25
 18e:	92 23       	and	r25, r18
 190:	94 bb       	out	0x14, r25	; 20
                PORTC |= (1 << Copy_enuPinNum);
 192:	95 b3       	in	r25, 0x15	; 21
 194:	89 2b       	or	r24, r25
 196:	85 bb       	out	0x15, r24	; 21

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRC |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
                DDRC &= ~(1 << Copy_enuPinNum);
                PORTC |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
 19c:	42 30       	cpi	r20, 0x02	; 2
 19e:	09 f0       	breq	.+2      	; 0x1a2 <MDIO_enuSetPinConfigration+0x136>
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <MDIO_enuSetPinConfigration+0x1d0>
                DDRC &= ~(1 << Copy_enuPinNum);
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <MDIO_enuSetPinConfigration+0x142>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <MDIO_enuSetPinConfigration+0x13e>
 1b2:	80 95       	com	r24
 1b4:	92 2f       	mov	r25, r18
 1b6:	98 23       	and	r25, r24
 1b8:	94 bb       	out	0x14, r25	; 20
                PORTC &= ~(1 << Copy_enuPinNum);
 1ba:	95 b3       	in	r25, 0x15	; 21
 1bc:	89 23       	and	r24, r25
 1be:	85 bb       	out	0x15, r24	; 21

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
                return MDIO_NOK;
            }
            break;

        case 3: /* PORTD */
            if (Copy_enuConfigration == PIN_OUTPUT) {
 1c4:	43 30       	cpi	r20, 0x03	; 3
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <MDIO_enuSetPinConfigration+0x174>
                DDRD |= (1 << Copy_enuPinNum);
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <MDIO_enuSetPinConfigration+0x168>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <MDIO_enuSetPinConfigration+0x164>
 1d8:	82 2b       	or	r24, r18
 1da:	81 bb       	out	0x11, r24	; 17

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
            break;

        case 3: /* PORTD */
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRD |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	89 f4       	brne	.+34     	; 0x206 <MDIO_enuSetPinConfigration+0x19a>
                DDRD &= ~(1 << Copy_enuPinNum);
 1e4:	21 b3       	in	r18, 0x11	; 17
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <MDIO_enuSetPinConfigration+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <MDIO_enuSetPinConfigration+0x180>
 1f4:	98 2f       	mov	r25, r24
 1f6:	90 95       	com	r25
 1f8:	92 23       	and	r25, r18
 1fa:	91 bb       	out	0x11, r25	; 17
                PORTD |= (1 << Copy_enuPinNum);
 1fc:	92 b3       	in	r25, 0x12	; 18
 1fe:	89 2b       	or	r24, r25
 200:	82 bb       	out	0x12, r24	; 18

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
            if (Copy_enuConfigration == PIN_OUTPUT) {
                DDRD |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLUP) {
                DDRD &= ~(1 << Copy_enuPinNum);
                PORTD |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
 206:	42 30       	cpi	r20, 0x02	; 2
 208:	d9 f4       	brne	.+54     	; 0x240 <MDIO_enuSetPinConfigration+0x1d4>
                DDRD &= ~(1 << Copy_enuPinNum);
 20a:	21 b3       	in	r18, 0x11	; 17
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <MDIO_enuSetPinConfigration+0x1aa>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <MDIO_enuSetPinConfigration+0x1a6>
 21a:	80 95       	com	r24
 21c:	92 2f       	mov	r25, r18
 21e:	98 23       	and	r25, r24
 220:	91 bb       	out	0x11, r25	; 17
                PORTD &= ~(1 << Copy_enuPinNum);
 222:	92 b3       	in	r25, 0x12	; 18
 224:	89 23       	and	r24, r25
 226:	82 bb       	out	0x12, r24	; 18

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
/*
 * function to set pin configuration
 */
MDIO_enuErrorStatus_t MDIO_enuSetPinConfigration(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8 Copy_enuConfigration) {
    if (Copy_enuPinNum > 7) {
        return MDIO_INVALID_PIN;  // Invalid pin number
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	08 95       	ret
                return MDIO_NOK;
            }
            break;

        default:
            return MDIO_INVALID_PORT;  // Invalid port number
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	08 95       	ret
                PORTA |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
                DDRA &= ~(1 << Copy_enuPinNum);
                PORTA &= ~(1 << Copy_enuPinNum);
            } else {
                return MDIO_NOK;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	08 95       	ret
                PORTB |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
                DDRB &= ~(1 << Copy_enuPinNum);
                PORTB &= ~(1 << Copy_enuPinNum);
            } else {
                return MDIO_NOK;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
                PORTC |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
                DDRC &= ~(1 << Copy_enuPinNum);
                PORTC &= ~(1 << Copy_enuPinNum);
            } else {
                return MDIO_NOK;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret
                PORTD |= (1 << Copy_enuPinNum);
            } else if (Copy_enuConfigration == PIN_INPUT_PULLDOWN) {
                DDRD &= ~(1 << Copy_enuPinNum);
                PORTD &= ~(1 << Copy_enuPinNum);
            } else {
                return MDIO_NOK;
 240:	81 e0       	ldi	r24, 0x01	; 1
        default:
            return MDIO_INVALID_PORT;  // Invalid port number
    }

    return MDIO_OK;
}
 242:	08 95       	ret

00000244 <MDIO_enuSetPinValue>:

/*
 * function to set pin value logic high/  low
 */
MDIO_enuErrorStatus_t MDIO_enuSetPinValue(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8 Copy_enuState) {
    if (Copy_enuPinNum > 7) {
 244:	68 30       	cpi	r22, 0x08	; 8
 246:	08 f0       	brcs	.+2      	; 0x24a <MDIO_enuSetPinValue+0x6>
 248:	75 c0       	rjmp	.+234    	; 0x334 <MDIO_enuSetPinValue+0xf0>
        return MDIO_INVALID_PIN;  // Invalid pin number
    }

    switch (Copy_enuPortNum) {
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	11 f1       	breq	.+68     	; 0x292 <MDIO_enuSetPinValue+0x4e>
 24e:	30 f0       	brcs	.+12     	; 0x25c <MDIO_enuSetPinValue+0x18>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	d1 f1       	breq	.+116    	; 0x2c8 <MDIO_enuSetPinValue+0x84>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <MDIO_enuSetPinValue+0x16>
 258:	52 c0       	rjmp	.+164    	; 0x2fe <MDIO_enuSetPinValue+0xba>
 25a:	6e c0       	rjmp	.+220    	; 0x338 <MDIO_enuSetPinValue+0xf4>
        case 0:
            if (Copy_enuState) PORTA |= (1 << Copy_enuPinNum);
 25c:	44 23       	and	r20, r20
 25e:	61 f0       	breq	.+24     	; 0x278 <MDIO_enuSetPinValue+0x34>
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <MDIO_enuSetPinValue+0x28>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <MDIO_enuSetPinValue+0x24>
 270:	82 2b       	or	r24, r18
 272:	8b bb       	out	0x1b, r24	; 27

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
    }

    switch (Copy_enuPortNum) {
        case 0:
            if (Copy_enuState) PORTA |= (1 << Copy_enuPinNum);
            else PORTA &= ~(1 << Copy_enuPinNum);
 278:	2b b3       	in	r18, 0x1b	; 27
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <MDIO_enuSetPinValue+0x40>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <MDIO_enuSetPinValue+0x3c>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	8b bb       	out	0x1b, r24	; 27

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
            if (Copy_enuState) PORTA |= (1 << Copy_enuPinNum);
            else PORTA &= ~(1 << Copy_enuPinNum);
            break;

        case 1:
            if (Copy_enuState) PORTB |= (1 << Copy_enuPinNum);
 292:	44 23       	and	r20, r20
 294:	61 f0       	breq	.+24     	; 0x2ae <MDIO_enuSetPinValue+0x6a>
 296:	28 b3       	in	r18, 0x18	; 24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <MDIO_enuSetPinValue+0x5e>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <MDIO_enuSetPinValue+0x5a>
 2a6:	82 2b       	or	r24, r18
 2a8:	88 bb       	out	0x18, r24	; 24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
            else PORTA &= ~(1 << Copy_enuPinNum);
            break;

        case 1:
            if (Copy_enuState) PORTB |= (1 << Copy_enuPinNum);
            else PORTB &= ~(1 << Copy_enuPinNum);
 2ae:	28 b3       	in	r18, 0x18	; 24
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MDIO_enuSetPinValue+0x76>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <MDIO_enuSetPinValue+0x72>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	88 bb       	out	0x18, r24	; 24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
            if (Copy_enuState) PORTB |= (1 << Copy_enuPinNum);
            else PORTB &= ~(1 << Copy_enuPinNum);
            break;

        case 2:
            if (Copy_enuState) PORTC |= (1 << Copy_enuPinNum);
 2c8:	44 23       	and	r20, r20
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <MDIO_enuSetPinValue+0xa0>
 2cc:	25 b3       	in	r18, 0x15	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <MDIO_enuSetPinValue+0x94>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <MDIO_enuSetPinValue+0x90>
 2dc:	82 2b       	or	r24, r18
 2de:	85 bb       	out	0x15, r24	; 21

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
            else PORTB &= ~(1 << Copy_enuPinNum);
            break;

        case 2:
            if (Copy_enuState) PORTC |= (1 << Copy_enuPinNum);
            else PORTC &= ~(1 << Copy_enuPinNum);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <MDIO_enuSetPinValue+0xac>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <MDIO_enuSetPinValue+0xa8>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	85 bb       	out	0x15, r24	; 21

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret
            if (Copy_enuState) PORTC |= (1 << Copy_enuPinNum);
            else PORTC &= ~(1 << Copy_enuPinNum);
            break;

        case 3:
            if (Copy_enuState) PORTD |= (1 << Copy_enuPinNum);
 2fe:	44 23       	and	r20, r20
 300:	61 f0       	breq	.+24     	; 0x31a <MDIO_enuSetPinValue+0xd6>
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <MDIO_enuSetPinValue+0xca>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <MDIO_enuSetPinValue+0xc6>
 312:	82 2b       	or	r24, r18
 314:	82 bb       	out	0x12, r24	; 18

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
            else PORTC &= ~(1 << Copy_enuPinNum);
            break;

        case 3:
            if (Copy_enuState) PORTD |= (1 << Copy_enuPinNum);
            else PORTD &= ~(1 << Copy_enuPinNum);
 31a:	22 b3       	in	r18, 0x12	; 18
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <MDIO_enuSetPinValue+0xe2>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <MDIO_enuSetPinValue+0xde>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	82 bb       	out	0x12, r24	; 18

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
/*
 * function to set pin value logic high/  low
 */
MDIO_enuErrorStatus_t MDIO_enuSetPinValue(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8 Copy_enuState) {
    if (Copy_enuPinNum > 7) {
        return MDIO_INVALID_PIN;  // Invalid pin number
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	08 95       	ret
            if (Copy_enuState) PORTD |= (1 << Copy_enuPinNum);
            else PORTD &= ~(1 << Copy_enuPinNum);
            break;

        default:
            return MDIO_INVALID_PORT;
 338:	83 e0       	ldi	r24, 0x03	; 3
    }

    return MDIO_OK;
}
 33a:	08 95       	ret

0000033c <MDIO_enuGetPinValue>:

/*
 * function to get and check on pin value low/high
 */
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8* Add_pu8PinValue) {
    if (Copy_enuPinNum > 7 || Add_pu8PinValue == NULL) {
 33c:	68 30       	cpi	r22, 0x08	; 8
 33e:	d8 f5       	brcc	.+118    	; 0x3b6 <MDIO_enuGetPinValue+0x7a>
 340:	41 15       	cp	r20, r1
 342:	51 05       	cpc	r21, r1
 344:	d1 f1       	breq	.+116    	; 0x3ba <MDIO_enuGetPinValue+0x7e>
        return MDIO_INVALID_PIN;
    }

    switch (Copy_enuPortNum) {
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 f0       	breq	.+36     	; 0x36e <MDIO_enuGetPinValue+0x32>
 34a:	28 f0       	brcs	.+10     	; 0x356 <MDIO_enuGetPinValue+0x1a>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	d9 f0       	breq	.+54     	; 0x386 <MDIO_enuGetPinValue+0x4a>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	29 f1       	breq	.+74     	; 0x39e <MDIO_enuGetPinValue+0x62>
 354:	34 c0       	rjmp	.+104    	; 0x3be <MDIO_enuGetPinValue+0x82>
        case 0:
            *Add_pu8PinValue = (PINA >> Copy_enuPinNum) & 0x01;
 356:	89 b3       	in	r24, 0x19	; 25
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <MDIO_enuGetPinValue+0x24>
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <MDIO_enuGetPinValue+0x20>
 364:	81 70       	andi	r24, 0x01	; 1
 366:	fa 01       	movw	r30, r20
 368:	80 83       	st	Z, r24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 36a:	80 e0       	ldi	r24, 0x00	; 0
    }

    switch (Copy_enuPortNum) {
        case 0:
            *Add_pu8PinValue = (PINA >> Copy_enuPinNum) & 0x01;
            break;
 36c:	08 95       	ret

        case 1:
            *Add_pu8PinValue = (PINB >> Copy_enuPinNum) & 0x01;
 36e:	86 b3       	in	r24, 0x16	; 22
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <MDIO_enuGetPinValue+0x3c>
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <MDIO_enuGetPinValue+0x38>
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	fa 01       	movw	r30, r20
 380:	80 83       	st	Z, r24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
            *Add_pu8PinValue = (PINA >> Copy_enuPinNum) & 0x01;
            break;

        case 1:
            *Add_pu8PinValue = (PINB >> Copy_enuPinNum) & 0x01;
            break;
 384:	08 95       	ret

        case 2:
            *Add_pu8PinValue = (PINC >> Copy_enuPinNum) & 0x01;
 386:	83 b3       	in	r24, 0x13	; 19
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <MDIO_enuGetPinValue+0x54>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <MDIO_enuGetPinValue+0x50>
 394:	81 70       	andi	r24, 0x01	; 1
 396:	fa 01       	movw	r30, r20
 398:	80 83       	st	Z, r24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
            *Add_pu8PinValue = (PINB >> Copy_enuPinNum) & 0x01;
            break;

        case 2:
            *Add_pu8PinValue = (PINC >> Copy_enuPinNum) & 0x01;
            break;
 39c:	08 95       	ret

        case 3:
            *Add_pu8PinValue = (PIND >> Copy_enuPinNum) & 0x01;
 39e:	80 b3       	in	r24, 0x10	; 16
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_enuGetPinValue+0x6c>
 3a4:	95 95       	asr	r25
 3a6:	87 95       	ror	r24
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_enuGetPinValue+0x68>
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	fa 01       	movw	r30, r20
 3b0:	80 83       	st	Z, r24

        default:
            return MDIO_INVALID_PORT;
    }

    return MDIO_OK;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
            *Add_pu8PinValue = (PINC >> Copy_enuPinNum) & 0x01;
            break;

        case 3:
            *Add_pu8PinValue = (PIND >> Copy_enuPinNum) & 0x01;
            break;
 3b4:	08 95       	ret
/*
 * function to get and check on pin value low/high
 */
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(u8 Copy_enuPortNum, u8 Copy_enuPinNum, u8* Add_pu8PinValue) {
    if (Copy_enuPinNum > 7 || Add_pu8PinValue == NULL) {
        return MDIO_INVALID_PIN;
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	08 95       	ret
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	08 95       	ret
        case 3:
            *Add_pu8PinValue = (PIND >> Copy_enuPinNum) & 0x01;
            break;

        default:
            return MDIO_INVALID_PORT;
 3be:	83 e0       	ldi	r24, 0x03	; 3
    }

    return MDIO_OK;
}
 3c0:	08 95       	ret

000003c2 <main>:
#include <util/delay.h>
#include "dio.h"


int main(void)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	1f 92       	push	r1
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
	// Set PB2 as output for LED
	MDIO_enuSetPinConfigration(1, 2, PIN_OUTPUT);
 3cc:	43 e0       	ldi	r20, 0x03	; 3
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_enuSetPinConfigration>

	// Set PB1 as input with internal pull-up for the button
	MDIO_enuSetPinConfigration(1, 1, PIN_INPUT_PULLUP);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_enuSetPinConfigration>

	while (1)
	{
		uint8_t buttonState = 0;
 3e0:	19 82       	std	Y+1, r1	; 0x01

		// Read the button state
		MDIO_enuGetPinValue(1, 1, &buttonState);
 3e2:	ae 01       	movw	r20, r28
 3e4:	4f 5f       	subi	r20, 0xFF	; 255
 3e6:	5f 4f       	sbci	r21, 0xFF	; 255
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 9e 01 	call	0x33c	; 0x33c <MDIO_enuGetPinValue>

		if (buttonState == 0)  // Button pressed
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	81 11       	cpse	r24, r1
 3f4:	06 c0       	rjmp	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			// Turn the LED on (PB2 high)
			MDIO_enuSetPinValue(1, 2, LOGIC_HIGH);
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 22 01 	call	0x244	; 0x244 <MDIO_enuSetPinValue>
 400:	05 c0       	rjmp	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		}
		else
		{
			// Turn the LED off (set PB2 low)
			MDIO_enuSetPinValue(1, 2, LOGIC_LOW);
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 22 01 	call	0x244	; 0x244 <MDIO_enuSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	2f e3       	ldi	r18, 0x3F	; 63
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	93 e0       	ldi	r25, 0x03	; 3
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
		}

		_delay_ms(10);  // Small delay for button
	}
 41e:	e0 cf       	rjmp	.-64     	; 0x3e0 <main+0x1e>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
