
iti_task5_dio_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000646  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e5  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// Set all PORTA pins as output for 8 LEDs
	DDRA = 0xFF;  // All 8 pins of PORTA as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26

	// Set PC0 as input (button) with pull-up enabled
	DDRC &= ~(1 << PC0);  // Set PC0 as input
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC0);   // Enable pull-up resistor on PC0
  76:	85 b3       	in	r24, 0x15	; 21
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21

	uint8_t counter = 0;  // 8-bit binary counter
	uint8_t counting = 0; // Flag to check if counting has started
  7c:	80 e0       	ldi	r24, 0x00	; 0

	// Set PC0 as input (button) with pull-up enabled
	DDRC &= ~(1 << PC0);  // Set PC0 as input
	PORTC |= (1 << PC0);   // Enable pull-up resistor on PC0

	uint8_t counter = 0;  // 8-bit binary counter
  7e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t counting = 0; // Flag to check if counting has started

	while (1)
	{
		// Check if the button is pressed (PC0 is low)
		if (!(PINC & (1 << PC0)) && !counting)  // Check for press when counting hasn't started
  80:	98 99       	sbic	0x13, 0	; 19
  82:	10 c0       	rjmp	.+32     	; 0xa4 <main+0x38>
  84:	81 11       	cpse	r24, r1
  86:	0e c0       	rjmp	.+28     	; 0xa4 <main+0x38>
		{
		

			if (!(PINC & (1 << PC0)))  // Check if the button is still pressed after debounce
  88:	98 99       	sbic	0x13, 0	; 19
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <main+0x38>
			{
				counting = 1;  // Start counting
				PORTA = 0x01;  // Indicate the button press by turning on LED0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e7       	ldi	r18, 0x7F	; 127
  92:	34 e8       	ldi	r19, 0x84	; 132
  94:	4e e1       	ldi	r20, 0x1E	; 30
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
				_delay_ms(100);  // Keep the LED on for visual feedback
				PORTA = 0x00;  // Turn off LED after the feedback
  a2:	1b ba       	out	0x1b, r1	; 27
			}
		}

		// If counting has started, increment counter every 100ms
		if (counting)
  a4:	88 23       	and	r24, r24
  a6:	61 f3       	breq	.-40     	; 0x80 <main+0x14>
  a8:	2f e7       	ldi	r18, 0x7F	; 127
  aa:	34 e8       	ldi	r19, 0x84	; 132
  ac:	4e e1       	ldi	r20, 0x1E	; 30
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
		{
			_delay_ms(100);  // Wait for 100ms

			// Increment the counter
			counter++;
  ba:	9f 5f       	subi	r25, 0xFF	; 255
			{
				counter = 0;  // Reset the counter to 0
			}

			// Display the counter value on PORTA (LEDs)
			PORTA = counter;  // Show the binary value of the counter on LEDs
  bc:	9b bb       	out	0x1b, r25	; 27
  be:	e0 cf       	rjmp	.-64     	; 0x80 <main+0x14>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
