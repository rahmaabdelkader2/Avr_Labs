
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000458  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000458  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e24  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086a  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a3f  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008de  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000118c  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000042d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  7a:	0c 94 2a 02 	jmp	0x454	; 0x454 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MDIO_enuSetPinValue>:

// Function to set a pin value
MDIO_enuErrorStatus_t MDIO_enuSetPinValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, MDIO_enuPinConfiguration_t Copy_enuPinConfiguration)
{
   
        switch (Copy_enuPinConfiguration)
  82:	44 23       	and	r20, r20
  84:	d9 f1       	breq	.+118    	; 0xfc <MDIO_enuSetPinValue+0x7a>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <MDIO_enuSetPinValue+0xa>
  8a:	74 c0       	rjmp	.+232    	; 0x174 <MDIO_enuSetPinValue+0xf2>
        {
            case MDIO_HIGH:
                switch (Copy_enuPortNum)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <MDIO_enuSetPinValue+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <MDIO_enuSetPinValue+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <MDIO_enuSetPinValue+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <MDIO_enuSetPinValue+0x62>
  9a:	6e c0       	rjmp	.+220    	; 0x178 <MDIO_enuSetPinValue+0xf6>
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
  9c:	2b b3       	in	r18, 0x1b	; 27
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <MDIO_enuSetPinValue+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <MDIO_enuSetPinValue+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8b bb       	out	0x1b, r24	; 27
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
  b0:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_enuPinConfiguration)
        {
            case MDIO_HIGH:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
  b2:	08 95       	ret
                    case MDIO_PORTB: SET_BIT(PORTB_REG, Copy_enuPinNum); break;
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <MDIO_enuSetPinValue+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <MDIO_enuSetPinValue+0x3a>
  c4:	82 2b       	or	r24, r18
  c6:	88 bb       	out	0x18, r24	; 24
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
  c8:	80 e0       	ldi	r24, 0x00	; 0
        {
            case MDIO_HIGH:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: SET_BIT(PORTB_REG, Copy_enuPinNum); break;
  ca:	08 95       	ret
                    case MDIO_PORTC: SET_BIT(PORTC_REG, Copy_enuPinNum); break;
  cc:	25 b3       	in	r18, 0x15	; 21
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <MDIO_enuSetPinValue+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <MDIO_enuSetPinValue+0x52>
  dc:	82 2b       	or	r24, r18
  de:	85 bb       	out	0x15, r24	; 21
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
  e0:	80 e0       	ldi	r24, 0x00	; 0
            case MDIO_HIGH:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: SET_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: SET_BIT(PORTC_REG, Copy_enuPinNum); break;
  e2:	08 95       	ret
                    case MDIO_PORTD: SET_BIT(PORTD_REG, Copy_enuPinNum); break;
  e4:	22 b3       	in	r18, 0x12	; 18
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <MDIO_enuSetPinValue+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <MDIO_enuSetPinValue+0x6a>
  f4:	82 2b       	or	r24, r18
  f6:	82 bb       	out	0x12, r24	; 18
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
  f8:	80 e0       	ldi	r24, 0x00	; 0
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: SET_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: SET_BIT(PORTC_REG, Copy_enuPinNum); break;
                    case MDIO_PORTD: SET_BIT(PORTD_REG, Copy_enuPinNum); break;
  fa:	08 95       	ret
                    default: return MDIO_NOK;
                }
                break;

            case MDIO_LOW:
                switch (Copy_enuPortNum)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	99 f0       	breq	.+38     	; 0x126 <MDIO_enuSetPinValue+0xa4>
 100:	28 f0       	brcs	.+10     	; 0x10c <MDIO_enuSetPinValue+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	e9 f0       	breq	.+58     	; 0x140 <MDIO_enuSetPinValue+0xbe>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	41 f1       	breq	.+80     	; 0x15a <MDIO_enuSetPinValue+0xd8>
 10a:	38 c0       	rjmp	.+112    	; 0x17c <MDIO_enuSetPinValue+0xfa>
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
 10c:	2b b3       	in	r18, 0x1b	; 27
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <MDIO_enuSetPinValue+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <MDIO_enuSetPinValue+0x92>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	8b bb       	out	0x1b, r24	; 27
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
 122:	80 e0       	ldi	r24, 0x00	; 0
                break;

            case MDIO_LOW:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
 124:	08 95       	ret
                    case MDIO_PORTB: CLR_BIT(PORTB_REG, Copy_enuPinNum); break;
 126:	28 b3       	in	r18, 0x18	; 24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <MDIO_enuSetPinValue+0xb0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <MDIO_enuSetPinValue+0xac>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	88 bb       	out	0x18, r24	; 24
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0

            case MDIO_LOW:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: CLR_BIT(PORTB_REG, Copy_enuPinNum); break;
 13e:	08 95       	ret
                    case MDIO_PORTC: CLR_BIT(PORTC_REG, Copy_enuPinNum); break;
 140:	25 b3       	in	r18, 0x15	; 21
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <MDIO_enuSetPinValue+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <MDIO_enuSetPinValue+0xc6>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	85 bb       	out	0x15, r24	; 21
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
            case MDIO_LOW:
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: CLR_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: CLR_BIT(PORTC_REG, Copy_enuPinNum); break;
 158:	08 95       	ret
                    case MDIO_PORTD: CLR_BIT(PORTD_REG, Copy_enuPinNum); break;
 15a:	22 b3       	in	r18, 0x12	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <MDIO_enuSetPinValue+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <MDIO_enuSetPinValue+0xe0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	82 bb       	out	0x12, r24	; 18
                break;

            default:
                return MDIO_NOK;
        }
        return MDIO_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
                switch (Copy_enuPortNum)
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: CLR_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: CLR_BIT(PORTC_REG, Copy_enuPinNum); break;
                    case MDIO_PORTD: CLR_BIT(PORTD_REG, Copy_enuPinNum); break;
 172:	08 95       	ret
                    default: return MDIO_NOK;
                }
                break;

            default:
                return MDIO_NOK;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
                {
                    case MDIO_PORTA: SET_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: SET_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: SET_BIT(PORTC_REG, Copy_enuPinNum); break;
                    case MDIO_PORTD: SET_BIT(PORTD_REG, Copy_enuPinNum); break;
                    default: return MDIO_NOK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
                {
                    case MDIO_PORTA: CLR_BIT(PORTA_REG, Copy_enuPinNum); break;
                    case MDIO_PORTB: CLR_BIT(PORTB_REG, Copy_enuPinNum); break;
                    case MDIO_PORTC: CLR_BIT(PORTC_REG, Copy_enuPinNum); break;
                    case MDIO_PORTD: CLR_BIT(PORTD_REG, Copy_enuPinNum); break;
                    default: return MDIO_NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
                return MDIO_NOK;
        }
        return MDIO_OK;
    
    return MDIO_NOK;
}
 17e:	08 95       	ret

00000180 <main>:
#include "SEVEN_SEG.h"
#include <util/delay.h>

int main(void) {
	// Initialize the seven-segment displays
	HSEVENSEG_vInit();
 180:	0e 94 4b 01 	call	0x296	; 0x296 <HSEVENSEG_vInit>
	// Test single-digit display on the first seven-segment
	// HSEVENSEG_vSetValue(0, 5); // Display 5 on the first seven-segment

	// // Wait for some time to observe the output
	// _delay_ms(500);
	HSEVENSEG_enuSetMultiDigitValue(1234);
 184:	82 ed       	ldi	r24, 0xD2	; 210
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	0e 94 a2 01 	call	0x344	; 0x344 <HSEVENSEG_enuSetMultiDigitValue>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0xc>

0000018e <MPORT_enuSetPortConfigration>:
	return Ret_enuError;
}

MPORT_enuErrorStatus_t MPORT_enuSetPortConfigration(u8 Copy_enuPortNum_PinNum, u8 Copy_enuConfigration) {
	//extract port number
	u8 port_Number = (Copy_enuPortNum_PinNum >> 4) & 0x0F;
 18e:	98 2f       	mov	r25, r24
 190:	92 95       	swap	r25
 192:	9f 70       	andi	r25, 0x0F	; 15
	//extract pin number
	u8 pin_Number = Copy_enuPortNum_PinNum & 0x0F;
 194:	8f 70       	andi	r24, 0x0F	; 15
	//validate the configuration
	if (Copy_enuConfigration != PIN_INPUT && Copy_enuConfigration != PIN_OUTPUT)
 196:	62 30       	cpi	r22, 0x02	; 2
 198:	08 f0       	brcs	.+2      	; 0x19c <MPORT_enuSetPortConfigration+0xe>
 19a:	79 c0       	rjmp	.+242    	; 0x28e <MPORT_enuSetPortConfigration+0x100>
	{
		return MPORT_ERROR_INVALID_DIRECTION;
	}
	//set the configuration based on the extracted port number
	switch (port_Number)
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	d1 f0       	breq	.+52     	; 0x1d4 <MPORT_enuSetPortConfigration+0x46>
 1a0:	30 f0       	brcs	.+12     	; 0x1ae <MPORT_enuSetPortConfigration+0x20>
 1a2:	92 30       	cpi	r25, 0x02	; 2
 1a4:	b1 f1       	breq	.+108    	; 0x212 <MPORT_enuSetPortConfigration+0x84>
 1a6:	93 30       	cpi	r25, 0x03	; 3
 1a8:	09 f4       	brne	.+2      	; 0x1ac <MPORT_enuSetPortConfigration+0x1e>
 1aa:	52 c0       	rjmp	.+164    	; 0x250 <MPORT_enuSetPortConfigration+0xc2>
 1ac:	72 c0       	rjmp	.+228    	; 0x292 <MPORT_enuSetPortConfigration+0x104>
	{
		case 0: // PORTA
		if (Copy_enuConfigration == PIN_OUTPUT)
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	71 f4       	brne	.+28     	; 0x1ce <MPORT_enuSetPortConfigration+0x40>
		SET_BIT(DDRA_REG, pin_Number);
 1b2:	4a b3       	in	r20, 0x1a	; 26
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	b9 01       	movw	r22, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <MPORT_enuSetPortConfigration+0x32>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <MPORT_enuSetPortConfigration+0x2e>
 1c4:	cb 01       	movw	r24, r22
 1c6:	84 2b       	or	r24, r20
 1c8:	8a bb       	out	0x1a, r24	; 26

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
	{
		case 0: // PORTA
		if (Copy_enuConfigration == PIN_OUTPUT)
		SET_BIT(DDRA_REG, pin_Number);
		else
		(DDRA_REG, pin_Number);
 1ce:	8a b3       	in	r24, 0x1a	; 26

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
		else
		(DDRA_REG, pin_Number);
		break;

		case 1: // PORTB
		if (Copy_enuConfigration == PIN_OUTPUT)
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	71 f4       	brne	.+28     	; 0x1f4 <MPORT_enuSetPortConfigration+0x66>
		SET_BIT(DDRB_REG, pin_Number);
 1d8:	47 b3       	in	r20, 0x17	; 23
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <MPORT_enuSetPortConfigration+0x58>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <MPORT_enuSetPortConfigration+0x54>
 1ea:	cb 01       	movw	r24, r22
 1ec:	84 2b       	or	r24, r20
 1ee:	87 bb       	out	0x17, r24	; 23

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

		case 1: // PORTB
		if (Copy_enuConfigration == PIN_OUTPUT)
		SET_BIT(DDRB_REG, pin_Number);
		else
		CLR_BIT(DDRB_REG, pin_Number);
 1f4:	47 b3       	in	r20, 0x17	; 23
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <MPORT_enuSetPortConfigration+0x74>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <MPORT_enuSetPortConfigration+0x70>
 206:	cb 01       	movw	r24, r22
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	87 bb       	out	0x17, r24	; 23

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
		else
		CLR_BIT(DDRB_REG, pin_Number);
		break;

		case 2: // PORTC
		if (Copy_enuConfigration == PIN_OUTPUT)
 212:	61 30       	cpi	r22, 0x01	; 1
 214:	71 f4       	brne	.+28     	; 0x232 <MPORT_enuSetPortConfigration+0xa4>
		SET_BIT(DDRC_REG, pin_Number);
 216:	44 b3       	in	r20, 0x14	; 20
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <MPORT_enuSetPortConfigration+0x96>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <MPORT_enuSetPortConfigration+0x92>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	84 bb       	out	0x14, r24	; 20

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

		case 2: // PORTC
		if (Copy_enuConfigration == PIN_OUTPUT)
		SET_BIT(DDRC_REG, pin_Number);
		else
		CLR_BIT(DDRC_REG, pin_Number);
 232:	44 b3       	in	r20, 0x14	; 20
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <MPORT_enuSetPortConfigration+0xb2>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <MPORT_enuSetPortConfigration+0xae>
 244:	cb 01       	movw	r24, r22
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	84 bb       	out	0x14, r24	; 20

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
		else
		CLR_BIT(DDRC_REG, pin_Number);
		break;

		case 3: // PORTD
		if (Copy_enuConfigration == PIN_OUTPUT)
 250:	61 30       	cpi	r22, 0x01	; 1
 252:	71 f4       	brne	.+28     	; 0x270 <MPORT_enuSetPortConfigration+0xe2>
		SET_BIT(DDRD_REG, pin_Number);
 254:	41 b3       	in	r20, 0x11	; 17
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <MPORT_enuSetPortConfigration+0xd4>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <MPORT_enuSetPortConfigration+0xd0>
 266:	cb 01       	movw	r24, r22
 268:	84 2b       	or	r24, r20
 26a:	81 bb       	out	0x11, r24	; 17

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

		case 3: // PORTD
		if (Copy_enuConfigration == PIN_OUTPUT)
		SET_BIT(DDRD_REG, pin_Number);
		else
		CLR_BIT(DDRD_REG, pin_Number);
 270:	41 b3       	in	r20, 0x11	; 17
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <MPORT_enuSetPortConfigration+0xf0>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <MPORT_enuSetPortConfigration+0xec>
 282:	cb 01       	movw	r24, r22
 284:	80 95       	com	r24
 286:	84 23       	and	r24, r20
 288:	81 bb       	out	0x11, r24	; 17

		default:
		return MPORT_ERROR_INVALID_PIN;
		break;
	}
	return MPORT_OK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
	//extract pin number
	u8 pin_Number = Copy_enuPortNum_PinNum & 0x0F;
	//validate the configuration
	if (Copy_enuConfigration != PIN_INPUT && Copy_enuConfigration != PIN_OUTPUT)
	{
		return MPORT_ERROR_INVALID_DIRECTION;
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	08 95       	ret
		else
		CLR_BIT(DDRD_REG, pin_Number);
		break;

		default:
		return MPORT_ERROR_INVALID_PIN;
 292:	86 e0       	ldi	r24, 0x06	; 6
		break;
	}
	return MPORT_OK;

 294:	08 95       	ret

00000296 <HSEVENSEG_vInit>:
	0x90  // 9
	#endif
};

/* Initialization Function */
void HSEVENSEG_vInit(void) {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
	for (u8 display = 0; display < HSEVENSEG_MAX_DISPLAYS; display++) {
 29a:	d0 e0       	ldi	r29, 0x00	; 0
 29c:	19 c0       	rjmp	.+50     	; 0x2d0 <HSEVENSEG_vInit+0x3a>
		for (u8 segment = 0; segment < 7; segment++) {
			MPORT_enuSetPortConfigration(SevenSegPins[display][segment] , PIN_OUTPUT);
 29e:	8d 2f       	mov	r24, r29
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	e8 1b       	sub	r30, r24
 2b2:	f9 0b       	sbc	r31, r25
 2b4:	e6 59       	subi	r30, 0x96	; 150
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	ec 0f       	add	r30, r28
 2ba:	f1 1d       	adc	r31, r1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	80 81       	ld	r24, Z
 2c0:	0e 94 c7 00 	call	0x18e	; 0x18e <MPORT_enuSetPortConfigration>
};

/* Initialization Function */
void HSEVENSEG_vInit(void) {
	for (u8 display = 0; display < HSEVENSEG_MAX_DISPLAYS; display++) {
		for (u8 segment = 0; segment < 7; segment++) {
 2c4:	cf 5f       	subi	r28, 0xFF	; 255
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <HSEVENSEG_vInit+0x34>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	c7 30       	cpi	r28, 0x07	; 7
 2cc:	40 f3       	brcs	.-48     	; 0x29e <HSEVENSEG_vInit+0x8>
	#endif
};

/* Initialization Function */
void HSEVENSEG_vInit(void) {
	for (u8 display = 0; display < HSEVENSEG_MAX_DISPLAYS; display++) {
 2ce:	df 5f       	subi	r29, 0xFF	; 255
 2d0:	d4 30       	cpi	r29, 0x04	; 4
 2d2:	d0 f3       	brcs	.-12     	; 0x2c8 <HSEVENSEG_vInit+0x32>
		for (u8 segment = 0; segment < 7; segment++) {
			MPORT_enuSetPortConfigration(SevenSegPins[display][segment] , PIN_OUTPUT);
		}
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <HSEVENSEG_vSetValue>:

/* Set Value on a Single Seven-Segment Display */
void HSEVENSEG_vSetValue(u8 Copy_enuSevenSegNum, u8 Copy_u8Value) {
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
	if (Copy_enuSevenSegNum >= HSEVENSEG_MAX_DISPLAYS || Copy_u8Value > 9) {
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	60 f5       	brcc	.+88     	; 0x33c <HSEVENSEG_vSetValue+0x62>
 2e4:	6a 30       	cpi	r22, 0x0A	; 10
 2e6:	50 f5       	brcc	.+84     	; 0x33c <HSEVENSEG_vSetValue+0x62>
 2e8:	d8 2f       	mov	r29, r24
		return; // Invalid input
	}

	u8 encodedValue = SevenSegDigitEncoding[Copy_u8Value];
 2ea:	e6 2f       	mov	r30, r22
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e0 5a       	subi	r30, 0xA0	; 160
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	10 81       	ld	r17, Z

	for (u8 segment = 0; segment < 7; segment++) {
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	20 c0       	rjmp	.+64     	; 0x338 <HSEVENSEG_vSetValue+0x5e>
		u8 pinState = (encodedValue >> segment) & 0x01;
 2f8:	41 2f       	mov	r20, r17
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	0c 2e       	mov	r0, r28
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <HSEVENSEG_vSetValue+0x2a>
 300:	55 95       	asr	r21
 302:	47 95       	ror	r20
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <HSEVENSEG_vSetValue+0x26>
 308:	41 70       	andi	r20, 0x01	; 1
		MDIO_enuSetPinValue((SevenSegPins[Copy_enuSevenSegNum][segment] >> 4)&0x0F, SevenSegPins[Copy_enuSevenSegNum][segment] & 0x0F, pinState);
 30a:	8d 2f       	mov	r24, r29
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	e8 1b       	sub	r30, r24
 31e:	f9 0b       	sbc	r31, r25
 320:	e6 59       	subi	r30, 0x96	; 150
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	ec 0f       	add	r30, r28
 326:	f1 1d       	adc	r31, r1
 328:	80 81       	ld	r24, Z
 32a:	68 2f       	mov	r22, r24
 32c:	6f 70       	andi	r22, 0x0F	; 15
 32e:	82 95       	swap	r24
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_enuSetPinValue>
		return; // Invalid input
	}

	u8 encodedValue = SevenSegDigitEncoding[Copy_u8Value];

	for (u8 segment = 0; segment < 7; segment++) {
 336:	cf 5f       	subi	r28, 0xFF	; 255
 338:	c7 30       	cpi	r28, 0x07	; 7
 33a:	f0 f2       	brcs	.-68     	; 0x2f8 <HSEVENSEG_vSetValue+0x1e>
		u8 pinState = (encodedValue >> segment) & 0x01;
		MDIO_enuSetPinValue((SevenSegPins[Copy_enuSevenSegNum][segment] >> 4)&0x0F, SevenSegPins[Copy_enuSevenSegNum][segment] & 0x0F, pinState);
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <HSEVENSEG_enuSetMultiDigitValue>:

/* Display Multi-Digit Value Across Multiple Seven-Segment Displays */
HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value) {
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ac 01       	movw	r20, r24
    u16 reversedValue = 0;
    u8 digitCount = 0;
 34e:	10 e0       	ldi	r17, 0x00	; 0
	}
}

/* Display Multi-Digit Value Across Multiple Seven-Segment Displays */
HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value) {
    u16 reversedValue = 0;
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	d0 e0       	ldi	r29, 0x00	; 0
    u8 digitCount = 0;

    // Reverse the digits of Copy_u16Value
    while (Copy_u16Value > 0) {
 354:	33 c0       	rjmp	.+102    	; 0x3bc <HSEVENSEG_enuSetMultiDigitValue+0x78>
        reversedValue = (reversedValue * 10) + (Copy_u16Value % 10);
 356:	9e 01       	movw	r18, r28
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	ce 01       	movw	r24, r28
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	e9 01       	movw	r28, r18
 36c:	c8 0f       	add	r28, r24
 36e:	d9 1f       	adc	r29, r25
 370:	9a 01       	movw	r18, r20
 372:	ad ec       	ldi	r26, 0xCD	; 205
 374:	bc ec       	ldi	r27, 0xCC	; 204
 376:	0e 94 1b 02 	call	0x436	; 0x436 <__umulhisi3>
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	9c 01       	movw	r18, r24
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	9a 01       	movw	r18, r20
 39e:	28 1b       	sub	r18, r24
 3a0:	39 0b       	sbc	r19, r25
 3a2:	c2 0f       	add	r28, r18
 3a4:	d3 1f       	adc	r29, r19
        Copy_u16Value /= 10;
 3a6:	9a 01       	movw	r18, r20
 3a8:	0e 94 1b 02 	call	0x436	; 0x436 <__umulhisi3>
 3ac:	ac 01       	movw	r20, r24
 3ae:	56 95       	lsr	r21
 3b0:	47 95       	ror	r20
 3b2:	56 95       	lsr	r21
 3b4:	47 95       	ror	r20
 3b6:	56 95       	lsr	r21
 3b8:	47 95       	ror	r20
        digitCount++;
 3ba:	1f 5f       	subi	r17, 0xFF	; 255
HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value) {
    u16 reversedValue = 0;
    u8 digitCount = 0;

    // Reverse the digits of Copy_u16Value
    while (Copy_u16Value > 0) {
 3bc:	41 15       	cp	r20, r1
 3be:	51 05       	cpc	r21, r1
 3c0:	51 f6       	brne	.-108    	; 0x356 <HSEVENSEG_enuSetMultiDigitValue+0x12>
 3c2:	00 e0       	ldi	r16, 0x00	; 0
 3c4:	30 c0       	rjmp	.+96     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
        digitCount++;
    }

    // Pad the remaining digits with 0 if necessary
    for (u8 display = 0; display < HSEVENSEG_MAX_DISPLAYS; display++) {
        if (display < digitCount) {
 3c6:	01 17       	cp	r16, r17
 3c8:	48 f5       	brcc	.+82     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
            u8 digit = reversedValue % 10;
 3ca:	9e 01       	movw	r18, r28
 3cc:	ad ec       	ldi	r26, 0xCD	; 205
 3ce:	bc ec       	ldi	r27, 0xCC	; 204
 3d0:	0e 94 1b 02 	call	0x436	; 0x436 <__umulhisi3>
 3d4:	ac 01       	movw	r20, r24
 3d6:	56 95       	lsr	r21
 3d8:	47 95       	ror	r20
 3da:	56 95       	lsr	r21
 3dc:	47 95       	ror	r20
 3de:	56 95       	lsr	r21
 3e0:	47 95       	ror	r20
 3e2:	ca 01       	movw	r24, r20
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	48 0f       	add	r20, r24
 3f6:	59 1f       	adc	r21, r25
 3f8:	ce 01       	movw	r24, r28
 3fa:	84 1b       	sub	r24, r20
 3fc:	95 0b       	sbc	r25, r21
 3fe:	ac 01       	movw	r20, r24
            reversedValue /= 10;
 400:	0e 94 1b 02 	call	0x436	; 0x436 <__umulhisi3>
 404:	ec 01       	movw	r28, r24
 406:	d6 95       	lsr	r29
 408:	c7 95       	ror	r28
 40a:	d6 95       	lsr	r29
 40c:	c7 95       	ror	r28
 40e:	d6 95       	lsr	r29
 410:	c7 95       	ror	r28
            HSEVENSEG_vSetValue(display, digit);
 412:	64 2f       	mov	r22, r20
 414:	80 2f       	mov	r24, r16
 416:	0e 94 6d 01 	call	0x2da	; 0x2da <HSEVENSEG_vSetValue>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
        } else {
            HSEVENSEG_vSetValue(display, 0); // Fill remaining displays with 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	80 2f       	mov	r24, r16
 420:	0e 94 6d 01 	call	0x2da	; 0x2da <HSEVENSEG_vSetValue>
        Copy_u16Value /= 10;
        digitCount++;
    }

    // Pad the remaining digits with 0 if necessary
    for (u8 display = 0; display < HSEVENSEG_MAX_DISPLAYS; display++) {
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	04 30       	cpi	r16, 0x04	; 4
 428:	70 f2       	brcs	.-100    	; 0x3c6 <HSEVENSEG_enuSetMultiDigitValue+0x82>
            HSEVENSEG_vSetValue(display, 0); // Fill remaining displays with 0
        }
    }

    return HSEVENSEG_enuOK;
}
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <__umulhisi3>:
 436:	a2 9f       	mul	r26, r18
 438:	b0 01       	movw	r22, r0
 43a:	b3 9f       	mul	r27, r19
 43c:	c0 01       	movw	r24, r0
 43e:	a3 9f       	mul	r26, r19
 440:	70 0d       	add	r23, r0
 442:	81 1d       	adc	r24, r1
 444:	11 24       	eor	r1, r1
 446:	91 1d       	adc	r25, r1
 448:	b2 9f       	mul	r27, r18
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
