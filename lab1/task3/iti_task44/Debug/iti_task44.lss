
iti_task44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057e  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b4  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// Set PA0, PA1, PA2, PA3 as output for the 4 LEDs
	DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f 60       	ori	r24, 0x0F	; 15
  70:	8a bb       	out	0x1a, r24	; 26

	// Set PA4 as input for the button (with internal pull-up resistor enabled)
	DDRA &= ~(1 << PA4);      // Set PA4 as input
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8f 7e       	andi	r24, 0xEF	; 239
  76:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA4);      // Enable pull-up resistor on PA4
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	8b bb       	out	0x1b, r24	; 27

	uint8_t counter = 0;  // 4-bit counter
  7e:	80 e0       	ldi	r24, 0x00	; 0

	while (1)
	{
		// Check if the button is pressed (PA4 is low)
		if (!(PINA & (1 << PA4)))  // Button pressed (active low)
  80:	cc 99       	sbic	0x19, 4	; 25
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
		{
			//_delay_ms(50);  // Debounce delay

			// Ensure the button is still pressed after the debounce delay
			if (!(PINA & (1 << PA4)))
  84:	cc 99       	sbic	0x19, 4	; 25
  86:	fc cf       	rjmp	.-8      	; 0x80 <main+0x14>
			{
				counter++;  // Increment the counter
  88:	8f 5f       	subi	r24, 0xFF	; 255
				if (counter > 15)  // Reset counter after 4-bit overflow (16 states max)
  8a:	80 31       	cpi	r24, 0x10	; 16
  8c:	08 f0       	brcs	.+2      	; 0x90 <main+0x24>
				counter = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0

				// Display the current counter value on the 4 LEDs (PA0 to PA3)
				PORTA = (PORTA & 0xF0) | (counter & 0x0F);  // Update PA0 to PA3 with the counter value
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	29 2f       	mov	r18, r25
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	98 2f       	mov	r25, r24
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
		
				// Add delay to allow for visible changes on LEDs
				//_delay_ms(500);  // Delay for visibility of LED change

				// Wait until the button is released to avoid multiple increments
				while (!(PINA & (1 << PA4))) {
  9e:	cc 9b       	sbis	0x19, 4	; 25
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x32>
  a2:	ee cf       	rjmp	.-36     	; 0x80 <main+0x14>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
